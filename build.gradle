plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

version = '1.8'
group = 'de.bottlecaps'

ext {
    targetJavaVersion = 11
}

println "Building project '${project.name}' with Java ${targetJavaVersion} (toolchain configured)"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.basex:basex:11.8'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(targetJavaVersion)
    options.fork = true
    options.forkOptions.jvmArgs += ['-Xss4m', '-Duser.language=en']
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    javaLauncher.set(
        javaToolchains.launcherFor {
            languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
        }
    )
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'de.bottlecaps.markup.Blitz',
            'Implementation-Version': project.version,
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        )
    }
    archiveFileName = "${project.name}.jar"
}

test {
    if (project.hasProperty('ALL_TESTS') && project.ALL_TESTS.toBoolean()) {
        maxHeapSize = '16g'
        systemProperty 'ALL_TESTS', 'true'
        jvmArgs('-Xss4m')
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "${result.testCount} tests completed: " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.skippedTestCount} skipped, " +
                    "${result.failedTestCount} failed."
        }
    }
}

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

void configureMetadata(MavenPublication mavenPublication) {
    configure (mavenPublication) {
        pom {
            name = groupId + ':' + artifactId
            description = 'Markup Blitz Parser Generator'
            url = 'https://github.com/GuntherRademacher/markup-blitz'
            licenses {
                license {
                    name = 'Apache-2.0'
                    url = 'https://opensource.org/licenses/Apache-2.0'
                }
            }
            developers {
                developer {
                    name = 'Gunther Rademacher'
                    email = 'grd@gmx.net'
                    organization = 'Gunther Rademacher'
                    organizationUrl = 'https://www.bottlecaps.de/'
                }
            }
            scm {
                connection = 'git@github.com:GuntherRademacher/markup-blitz.git'
                developerConnection = 'git@github.com:GuntherRademacher/markup-blitz.git'
                url = 'https://github.com/GuntherRademacher/markup-blitz'
            }
        }
    }
}

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        jar(MavenPublication) {
            artifactId = 'markup-blitz'
            from components.java
            configureMetadata delegate
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.jar
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

gradle.taskGraph.whenReady { graph ->
    if (JavaVersion.current().ordinal() > JavaVersion.VERSION_11.ordinal()) {
        println "Warning: building with JDK ${JavaVersion.current()}, but targeting Java ${targetJavaVersion}"
    }
}
